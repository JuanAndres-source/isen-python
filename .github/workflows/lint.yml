name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  # Lint Dockerfile
  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Hadolint on Dockerfile
        uses: hadolint/hadolint-action@v2
        with:
          dockerfile: Dockerfile  # Ruta al Dockerfile en el repositorio

  # Pruebas Unitarias
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Unit tests
        run: |
          pytest tests/unit_tests -v

  # Pruebas de Integración
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Integration tests
        run: |
          pytest tests/integration_tests -v

  # Análisis de Seguridad con Bandit
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Bandit
        run: |
          pip install bandit

      - name: Run Bandit SAST
        run: |
          bandit -r . --exclude tests,integration_tests,unit_tests -q

  # Construcción y Envío de la Imagen Docker
  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-dockerfile, unit-tests, integration-tests, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'  # Solo se construye en las ramas `main` y `master`
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/isen-python:dev-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/isen-python:latest

  # Escaneo de Vulnerabilidades con Trivy
  trivy-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/isen-python:dev-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif

  # Generación de SBOM con Syft
  generate-sbom:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0.14.0
        with:
          path: ${{ github.workspace }}
          format: syft-json
          output-file: sbom.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v2
        with:
          name: sbom
          path: sbom.json

  # Escaneo del SBOM con Grype
  grype-scan:
    runs-on: ubuntu-latest
    needs: generate-sbom
    steps:
      - name: Scan SBOM with Grype
        uses: anchore/scan-action@v0.7.0
        with:
          sbom: sbom.json
          fail-build: false  
