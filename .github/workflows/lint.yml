name: CI‑Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/isen-python

# ---------- LINT --------------------------------------------------
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ---- Dockerfile linter (Hadolint) ----
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3
        with:
          dockerfile: Dockerfile
          failure-threshold: warning      # fail on warning or error

      # ---- Python linter (Pylint) ----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps & lint
        run: |
          pip install --upgrade pip pylint
          [ -f requirements.txt ] && pip install -r requirements.txt
          pylint $(git ls-files '*.py') \
                 --disable=C,R0801,import-error \
                 --fail-under=7

# ---------- TESTS -------------------------------------------------
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          pip install --upgrade pip pytest
          [ -f requirements.txt ] && pip install -r requirements.txt
      - name: Run unit tests
        run: pytest unit_tests -q --maxfail=1

  integration-tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          pip install --upgrade pip pytest
          [ -f requirements.txt ] && pip install -r requirements.txt
      - name: Run integration tests
        run: pytest integration_tests -q --maxfail=1

# ---------- SAST (Bandit) ----------------------------------------
  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r . --exclude unit_tests,integration_tests -q
          
# ---------- BUILD & IMAGE SCAN -----------------------------------
  build-push-image:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security]
    if: startsWith(github.ref_name, 'dev-')   # build only on dev‑* branches
    permissions: write-all
    steps:
      - uses: actions/checkout@v4

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:dev-${{ github.sha }}

# ---------- TRIVY IMAGE SCAN -------------------------------------
  trivy-scan:
    runs-on: ubuntu-latest
    needs: build-push-image
    if: needs.build-push-image.result == 'success'
    continue-on-error: true        # do not fail pipeline on findings
    steps:
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: 'HIGH,CRITICAL'
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

# ---------- SBOM & GRYPE -----------------------------------------
  sbom-and-grype:
    runs-on: ubuntu-latest
    needs: build-push-image
    steps:
      - uses: actions/checkout@v4

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0.15.3
        with:
          path: dir:${{ github.workspace }}
          output-file: sbom.json
          format: syft-json

      - uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

      - name: Grype scan SBOM
        uses: anchore/scan-action@v3
        with:
          sbom: sbom.json
          fail-build: false          # do not break on findings
